/**
 * Generated by orval v7.1.1 🍺
 * Do not edit manually.
 * MBA Marketplace API
 * API to manage MBA Marketplace
 * OpenAPI spec version: 1.0
 */
import { useQuery } from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import { customInstance } from '../../lib/axios-instance'
import type { AmountResponse, ViewsPerDayResponse } from '.././model'

/**
 * @summary Count the number of products sold by the seller in 30 days
 */
export const countSellerSoldProductsControllerHandle = (
  signal?: AbortSignal
) => {
  return customInstance<AmountResponse>({
    url: `/sellers/metrics/products/sold`,
    method: 'GET',
    signal,
  })
}

export const getCountSellerSoldProductsControllerHandleQueryKey = () => {
  return [`/sellers/metrics/products/sold`] as const
}

export const getCountSellerSoldProductsControllerHandleQueryOptions = <
  TData = Awaited<ReturnType<typeof countSellerSoldProductsControllerHandle>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof countSellerSoldProductsControllerHandle>>,
      TError,
      TData
    >
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getCountSellerSoldProductsControllerHandleQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof countSellerSoldProductsControllerHandle>>
  > = ({ signal }) => countSellerSoldProductsControllerHandle(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof countSellerSoldProductsControllerHandle>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type CountSellerSoldProductsControllerHandleQueryResult = NonNullable<
  Awaited<ReturnType<typeof countSellerSoldProductsControllerHandle>>
>
export type CountSellerSoldProductsControllerHandleQueryError = undefined

export function useCountSellerSoldProductsControllerHandle<
  TData = Awaited<ReturnType<typeof countSellerSoldProductsControllerHandle>>,
  TError = void,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof countSellerSoldProductsControllerHandle>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof countSellerSoldProductsControllerHandle>>,
        TError,
        TData
      >,
      'initialData'
    >
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useCountSellerSoldProductsControllerHandle<
  TData = Awaited<ReturnType<typeof countSellerSoldProductsControllerHandle>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof countSellerSoldProductsControllerHandle>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof countSellerSoldProductsControllerHandle>>,
        TError,
        TData
      >,
      'initialData'
    >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useCountSellerSoldProductsControllerHandle<
  TData = Awaited<ReturnType<typeof countSellerSoldProductsControllerHandle>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof countSellerSoldProductsControllerHandle>>,
      TError,
      TData
    >
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Count the number of products sold by the seller in 30 days
 */

export function useCountSellerSoldProductsControllerHandle<
  TData = Awaited<ReturnType<typeof countSellerSoldProductsControllerHandle>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof countSellerSoldProductsControllerHandle>>,
      TError,
      TData
    >
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions =
    getCountSellerSoldProductsControllerHandleQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Count the amount of available products in 30 days.
 */
export const countSellerAvailableProductsControllerHandle = (
  signal?: AbortSignal
) => {
  return customInstance<AmountResponse>({
    url: `/sellers/metrics/products/available`,
    method: 'GET',
    signal,
  })
}

export const getCountSellerAvailableProductsControllerHandleQueryKey = () => {
  return [`/sellers/metrics/products/available`] as const
}

export const getCountSellerAvailableProductsControllerHandleQueryOptions = <
  TData = Awaited<
    ReturnType<typeof countSellerAvailableProductsControllerHandle>
  >,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof countSellerAvailableProductsControllerHandle>>,
      TError,
      TData
    >
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getCountSellerAvailableProductsControllerHandleQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof countSellerAvailableProductsControllerHandle>>
  > = ({ signal }) => countSellerAvailableProductsControllerHandle(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof countSellerAvailableProductsControllerHandle>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type CountSellerAvailableProductsControllerHandleQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof countSellerAvailableProductsControllerHandle>>
  >
export type CountSellerAvailableProductsControllerHandleQueryError = undefined

export function useCountSellerAvailableProductsControllerHandle<
  TData = Awaited<
    ReturnType<typeof countSellerAvailableProductsControllerHandle>
  >,
  TError = void,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof countSellerAvailableProductsControllerHandle>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<
          ReturnType<typeof countSellerAvailableProductsControllerHandle>
        >,
        TError,
        TData
      >,
      'initialData'
    >
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useCountSellerAvailableProductsControllerHandle<
  TData = Awaited<
    ReturnType<typeof countSellerAvailableProductsControllerHandle>
  >,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof countSellerAvailableProductsControllerHandle>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<
          ReturnType<typeof countSellerAvailableProductsControllerHandle>
        >,
        TError,
        TData
      >,
      'initialData'
    >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useCountSellerAvailableProductsControllerHandle<
  TData = Awaited<
    ReturnType<typeof countSellerAvailableProductsControllerHandle>
  >,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof countSellerAvailableProductsControllerHandle>>,
      TError,
      TData
    >
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Count the amount of available products in 30 days.
 */

export function useCountSellerAvailableProductsControllerHandle<
  TData = Awaited<
    ReturnType<typeof countSellerAvailableProductsControllerHandle>
  >,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof countSellerAvailableProductsControllerHandle>>,
      TError,
      TData
    >
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions =
    getCountSellerAvailableProductsControllerHandleQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Count the number of views received by the seller in 30 days
 */
export const countSellerViewsControllerHandle = (signal?: AbortSignal) => {
  return customInstance<AmountResponse>({
    url: `/sellers/metrics/views`,
    method: 'GET',
    signal,
  })
}

export const getCountSellerViewsControllerHandleQueryKey = () => {
  return [`/sellers/metrics/views`] as const
}

export const getCountSellerViewsControllerHandleQueryOptions = <
  TData = Awaited<ReturnType<typeof countSellerViewsControllerHandle>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof countSellerViewsControllerHandle>>,
      TError,
      TData
    >
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getCountSellerViewsControllerHandleQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof countSellerViewsControllerHandle>>
  > = ({ signal }) => countSellerViewsControllerHandle(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof countSellerViewsControllerHandle>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type CountSellerViewsControllerHandleQueryResult = NonNullable<
  Awaited<ReturnType<typeof countSellerViewsControllerHandle>>
>
export type CountSellerViewsControllerHandleQueryError = undefined

export function useCountSellerViewsControllerHandle<
  TData = Awaited<ReturnType<typeof countSellerViewsControllerHandle>>,
  TError = void,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof countSellerViewsControllerHandle>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof countSellerViewsControllerHandle>>,
        TError,
        TData
      >,
      'initialData'
    >
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useCountSellerViewsControllerHandle<
  TData = Awaited<ReturnType<typeof countSellerViewsControllerHandle>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof countSellerViewsControllerHandle>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof countSellerViewsControllerHandle>>,
        TError,
        TData
      >,
      'initialData'
    >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useCountSellerViewsControllerHandle<
  TData = Awaited<ReturnType<typeof countSellerViewsControllerHandle>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof countSellerViewsControllerHandle>>,
      TError,
      TData
    >
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Count the number of views received by the seller in 30 days
 */

export function useCountSellerViewsControllerHandle<
  TData = Awaited<ReturnType<typeof countSellerViewsControllerHandle>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof countSellerViewsControllerHandle>>,
      TError,
      TData
    >
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getCountSellerViewsControllerHandleQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Count the number of views per day received by the seller in 30 days
 */
export const countSellerViewsPerDayControllerHandle = (
  signal?: AbortSignal
) => {
  return customInstance<ViewsPerDayResponse>({
    url: `/sellers/metrics/views/days`,
    method: 'GET',
    signal,
  })
}

export const getCountSellerViewsPerDayControllerHandleQueryKey = () => {
  return [`/sellers/metrics/views/days`] as const
}

export const getCountSellerViewsPerDayControllerHandleQueryOptions = <
  TData = Awaited<ReturnType<typeof countSellerViewsPerDayControllerHandle>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof countSellerViewsPerDayControllerHandle>>,
      TError,
      TData
    >
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getCountSellerViewsPerDayControllerHandleQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof countSellerViewsPerDayControllerHandle>>
  > = ({ signal }) => countSellerViewsPerDayControllerHandle(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof countSellerViewsPerDayControllerHandle>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type CountSellerViewsPerDayControllerHandleQueryResult = NonNullable<
  Awaited<ReturnType<typeof countSellerViewsPerDayControllerHandle>>
>
export type CountSellerViewsPerDayControllerHandleQueryError = undefined

export function useCountSellerViewsPerDayControllerHandle<
  TData = Awaited<ReturnType<typeof countSellerViewsPerDayControllerHandle>>,
  TError = void,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof countSellerViewsPerDayControllerHandle>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof countSellerViewsPerDayControllerHandle>>,
        TError,
        TData
      >,
      'initialData'
    >
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useCountSellerViewsPerDayControllerHandle<
  TData = Awaited<ReturnType<typeof countSellerViewsPerDayControllerHandle>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof countSellerViewsPerDayControllerHandle>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof countSellerViewsPerDayControllerHandle>>,
        TError,
        TData
      >,
      'initialData'
    >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useCountSellerViewsPerDayControllerHandle<
  TData = Awaited<ReturnType<typeof countSellerViewsPerDayControllerHandle>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof countSellerViewsPerDayControllerHandle>>,
      TError,
      TData
    >
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Count the number of views per day received by the seller in 30 days
 */

export function useCountSellerViewsPerDayControllerHandle<
  TData = Awaited<ReturnType<typeof countSellerViewsPerDayControllerHandle>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof countSellerViewsPerDayControllerHandle>>,
      TError,
      TData
    >
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions =
    getCountSellerViewsPerDayControllerHandleQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}
