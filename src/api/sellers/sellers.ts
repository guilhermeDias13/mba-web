/**
 * Generated by orval v7.1.1 🍺
 * Do not edit manually.
 * MBA Marketplace API
 * API to manage MBA Marketplace
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import { customInstance } from '../../lib/axios-instance'
import type {
  CreateSellerBody,
  CreateSellerResponse,
  SellerProfileResponse,
} from '.././model'

/**
 * @summary Create a new seller
 */
export const registerSellerControllerHandle = (
  createSellerBody: CreateSellerBody
) => {
  return customInstance<CreateSellerResponse>({
    url: `/sellers`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createSellerBody,
  })
}

export const getRegisterSellerControllerHandleMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof registerSellerControllerHandle>>,
    TError,
    { data: CreateSellerBody },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof registerSellerControllerHandle>>,
  TError,
  { data: CreateSellerBody },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof registerSellerControllerHandle>>,
    { data: CreateSellerBody }
  > = props => {
    const { data } = props ?? {}

    return registerSellerControllerHandle(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type RegisterSellerControllerHandleMutationResult = NonNullable<
  Awaited<ReturnType<typeof registerSellerControllerHandle>>
>
export type RegisterSellerControllerHandleMutationBody = CreateSellerBody
export type RegisterSellerControllerHandleMutationError = undefined

/**
 * @summary Create a new seller
 */
export const useRegisterSellerControllerHandle = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof registerSellerControllerHandle>>,
    TError,
    { data: CreateSellerBody },
    TContext
  >
}): UseMutationResult<
  Awaited<ReturnType<typeof registerSellerControllerHandle>>,
  TError,
  { data: CreateSellerBody },
  TContext
> => {
  const mutationOptions =
    getRegisterSellerControllerHandleMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary Get the seller profile
 */
export const sellerProfileControllerHandle = (signal?: AbortSignal) => {
  return customInstance<SellerProfileResponse>({
    url: `/sellers/me`,
    method: 'GET',
    signal,
  })
}

export const getSellerProfileControllerHandleQueryKey = () => {
  return [`/sellers/me`] as const
}

export const getSellerProfileControllerHandleQueryOptions = <
  TData = Awaited<ReturnType<typeof sellerProfileControllerHandle>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof sellerProfileControllerHandle>>,
      TError,
      TData
    >
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getSellerProfileControllerHandleQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof sellerProfileControllerHandle>>
  > = ({ signal }) => sellerProfileControllerHandle(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof sellerProfileControllerHandle>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type SellerProfileControllerHandleQueryResult = NonNullable<
  Awaited<ReturnType<typeof sellerProfileControllerHandle>>
>
export type SellerProfileControllerHandleQueryError = unknown

export function useSellerProfileControllerHandle<
  TData = Awaited<ReturnType<typeof sellerProfileControllerHandle>>,
  TError = unknown,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof sellerProfileControllerHandle>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof sellerProfileControllerHandle>>,
        TError,
        TData
      >,
      'initialData'
    >
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useSellerProfileControllerHandle<
  TData = Awaited<ReturnType<typeof sellerProfileControllerHandle>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof sellerProfileControllerHandle>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof sellerProfileControllerHandle>>,
        TError,
        TData
      >,
      'initialData'
    >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useSellerProfileControllerHandle<
  TData = Awaited<ReturnType<typeof sellerProfileControllerHandle>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof sellerProfileControllerHandle>>,
      TError,
      TData
    >
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Get the seller profile
 */

export function useSellerProfileControllerHandle<
  TData = Awaited<ReturnType<typeof sellerProfileControllerHandle>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof sellerProfileControllerHandle>>,
      TError,
      TData
    >
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getSellerProfileControllerHandleQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}
